Differences between Singleton and Static

1. A Singleton class supports interface implementation, while static classes cannot implement interfaces.

2. A Singleton class supports inheritance, while a Static class is a sealed class, and therefore cannot be inherited.

3. A Singleton class can inherit from other classes, while a Static class cannot (not even from other static classes).

4. A Singleton class can be instantiated using the new keyword, while static can not be instantiated (static class can be used directly).

5. Both Singleton and static are stored on the Heap memory, 
but static classes are stored in a special area of the Heap Memory called the High-Frequency Heap (Objects in High Frequency Heap are not garbage collected by GC, 
and hence static members are available throughout the application lifetime).

6. A Singleton class can Dispose, while a static class can not.

7. A Singleton class can have a constructor, while a static class can only have a private static parameterless constructor and cannot have instance constructors.

8. A Static class has better performance since static methods are bonded on compile time.

9. A Singleton class can be lazy loaded when needed, while static classes are always loaded. 
Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.